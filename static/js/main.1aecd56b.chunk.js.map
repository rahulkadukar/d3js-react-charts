{"version":3,"sources":["../../src/LineChart/LineChartConfig.js","../../src/LineChart/LineChart.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["createProperty","name","type","desc","value","dataChart","n","data","d","i","k","v","Math","generateData","configChart","defaultConfig","config","p","LineChart","props","opts","Object","node","useRef","snode","theme","brush","d3brushX","someSVG","s1","a","s2","b","selectionRange","d3event","startTstmp","endTstmp","lineData","rk","Date","r","drawChart","clearTimeout","setTimeout","noBrushUpdate","minMaxTime","d3extent","updateBrush","d3min","xScale","xAxis","d3axisBottom","yScale","yAxis","d3axisLeft","pathData","svg","d3select","g","createXGrid","createYGrid","useEffect","top","right","bottom","left","marginLeft","parentElem","xAxisBrush","yAxisBrush","createSlidingWindow","width","className","ref","App","text","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1aecd56b.chunk.js","sourcesContent":["\nconst createProperty = (name, type, desc, value) => {\n  return {\n    name,\n    type,\n    desc,\n    value,\n  }\n}\n\nconst generateData = (n) => {\n  const data = []\n  let d = new Date()\n  for (let i = 0; i < n; ++i) {\n    data.push({\n      k: d.toISOString().slice(0,10),\n      v: i + Math.floor(Math.random() * 2025)\n    })\n    d.setTime(d.getTime() + (864e2 * 1e3))\n  }\n  return data\n}\n\nconst dataChart = generateData(800)\n\nconst configChart = {\n  \"docs\": [\n    createProperty(\"barPadding\", \"Numeric\",\n      \"Adjust distance between two adjacent bars.\", 10),\n    createProperty(\"barWidth\", \"Numeric\",\n      \"Adjust the width of each bar. Default 50\", 50),\n    createProperty(\"heightChart\", \"Numeric\",\n      \"Height of the chart. Default 500\", 600),\n    createProperty(\"marginBottom\", \"Numeric\",\n      \"The margin from the bottom of the element\", 40),\n    createProperty(\"marginLeft\", \"Numeric\",\n      \"The margin from the left of the element\", 20),\n    createProperty(\"marginRight\", \"Numeric\",\n      \"The margin from the right of the element\", 40),\n    createProperty(\"marginTop\", \"Numeric\",\n      \"The margin from the top of the element\", 20),\n    createProperty(\"slidingWindow\", \"Boolean\",\n      \"Display a sliding window for using the Brush\", true),\n    createProperty(\"slidingWindowHeight\", \"Numeric\",\n      \"Sliding window height\", 160),\n    createProperty(\"title\", \"Text\",\n      \"The title to display on the chart\", \"Title\")\n  ]\n}\n\nexport const config = configChart\nexport const data = dataChart\n","import React, {useEffect, useRef} from 'react'\n// @ts-ignore\nimport {\n  d3axisBottom,\n  d3axisLeft,\n  d3brushX,\n  d3curveMonotoneX,\n  d3event,\n  d3extent,\n  d3line,\n  d3max,\n  d3min,\n  d3scaleLinear,\n  d3scaleUtc,\n  d3select,\n  d3timeDay\n} from \"../D3Config/D3Config.js\"\n\n/* Import all configuration from LineChartConfig */\n// @ts-ignore\nimport {config, data as defaultData} from './LineChartConfig'\n\n/* Default configuration */\nconst defaultConfig = {}\nconfig.docs.forEach((p) => {\n  defaultConfig[p.name] = p.value\n})\n\nexport const LineChart = (props) => {\n  const opts = Object.assign({}, defaultConfig, props.config)\n  const node = useRef(null)\n  const snode = useRef(null)\n\n  const theme = props.theme ? props.theme : 'light'\n  const data = props.data ? props.data : defaultData\n\n  opts._data = data\n  opts._dbclick = false\n\n  function updateBrush(someSVG, a, b) {\n    const brush = d3brushX()\n      .extent([[0, 0], [opts._innerWidth, opts.slidingWindowHeight - 40]])\n\n    opts._slidingBrush = brush\n    opts._slidingBrush.on(\"end\", updateChartBrush)\n\n    someSVG.append(\"g\")\n      .attr(\"class\", \"slidingBrush\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, 20)`)\n\n    const s1 = a || 0\n    const s2 = b || 0\n\n    someSVG.select(\".slidingBrush\")\n      .call(brush)\n      .call(brush.move, [s1,s2])\n  }\n\n  function createSlidingWindow() {\n    // Get the node that will be used for creating the sliding window\n    const svg = d3select(snode.current)\n    svg.selectAll('*').remove()\n    svg.attr(\"width\", opts._width)\n      .attr(\"height\", opts.slidingWindowHeight)\n\n    opts._slidingSVG = svg\n    updateBrush(svg, 0, 0)\n\n    const xAxisBrush = d3axisBottom(opts._xScaleSliding)\n    const yAxisBrush = d3axisLeft(opts._yScaleSliding)\n      .tickValues(opts._yScaleSliding.domain())\n\n    const g = svg.append(\"g\")\n      .attr(\"width\", opts._innerWidth)\n      .attr(\"height\", opts.slidingWindowHeight)\n\n    g.append('g')\n      .call(xAxisBrush)\n      .style(\"font-size\", \"1em\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, ${opts.slidingWindowHeight - 20})`)\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(yAxisBrush)\n      .style(\"font-size\", \"1em\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, 0)`)\n      .style(\"font-family\", \"Roboto\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    const pathData = d3line().curve(d3curveMonotoneX)\n      .x(d => opts._xScaleSliding( new Date(`${d.k}T00:00:00`)))\n      .y(d => opts._yScaleSliding(d.v))\n\n    g.append('path')\n      .datum(opts._data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth},0)`)\n      .attr(\"d\", pathData)\n  }\n\n  function updateChartBrush() {\n    const selectionRange = d3event.selection\n\n    if (selectionRange && selectionRange !== [0,0]) {\n      const startTstmp = opts._xScaleSliding.invert(selectionRange[0])\n      const endTstmp = opts._xScaleSliding.invert(selectionRange[1])\n\n      const lineData = data.filter((r) => {\n        const rk = new Date(r.k)\n        if (rk >= startTstmp && rk <= endTstmp) return true\n        return false\n      })\n\n      opts._currData = lineData\n      drawChart(lineData, true)\n    }\n  }\n\n  function updateChart() {\n    const selectionRange = d3event.selection\n    if (selectionRange) {\n      const startTstmp = opts._xScale.invert(selectionRange[0])\n      const endTstmp = opts._xScale.invert(selectionRange[1])\n\n      const lineData = data.filter((r) => {\n        const rk = new Date(r.k)\n        if (rk >= startTstmp && rk <= endTstmp) return true\n        return false\n      })\n\n      if (lineData.length <= 3) {\n        lineData.length = 0\n        lineData.push(...opts._currData)\n      }\n\n      opts._currData = lineData\n      drawChart(lineData, false)\n    } else {\n      if (opts._dbclick) {\n        clearTimeout(opts._dbclickTimer)\n        drawChart(data, true)\n      } else {\n        opts._dbclickTimer = setTimeout(() => { opts._dbclick = false }, 200)\n      }\n\n      opts._dbclick = !opts._dbclick\n    }\n  }\n\n\n  const drawChart = (lineData, noBrushUpdate) => {\n    if (!noBrushUpdate) {\n      const minMaxTime = d3extent(lineData.map(d => new Date(`${d.k}T00:00:00`)))\n\n      updateBrush(opts._slidingSVG,\n        Math.floor(opts._xScaleSliding(minMaxTime[0])),\n        Math.floor(opts._xScaleSliding(minMaxTime[1])))\n    }\n\n    const brush = d3brushX()\n      .extent([[0,0],[opts._innerWidth, opts._innerHeight]])\n      .on(\"end\", updateChart)\n\n    // xScale is for the length along x-axis\n    d3min(lineData.map((d) => d.k));\n    const xScale = d3scaleUtc()\n      .domain(d3extent(lineData.map(d => new Date(`${d.k}T00:00:00`))))\n      .range([0, opts._innerWidth]).nice(d3timeDay)\n    opts._xScale = xScale\n    const xAxis = d3axisBottom(xScale)\n\n    // yScale is for the names of the keys along y-axis\n    const yScale = d3scaleLinear()\n      .domain(d3extent(lineData.map(d => d.v)))\n      .range([opts._innerHeight, 0]).nice()\n    const yAxis = d3axisLeft(yScale)\n\n    const pathData = d3line().curve(d3curveMonotoneX)\n      .x(d => xScale( new Date(`${d.k}T00:00:00`)))\n      .y(d => yScale(d.v))\n\n    const createXGrid = () => d3axisBottom(xScale)\n    const createYGrid = () => d3axisLeft(yScale)\n\n    // Get the node that will be used for creating the chart\n    const svg = d3select(node.current)\n    svg.selectAll('*').remove()\n\n    svg.attr(\"width\", opts._width)\n      .attr(\"height\", opts._height)\n\n    svg.append(\"g\")\n      .attr(\"class\", \"brush\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, ${opts._titleHeight + opts._margin.top})`)\n\n    svg.select(\".brush\")\n      .call(brush)\n\n    svg.append(\"text\")\n      .attr(\"x\", Math.round(opts._width / 2))\n      .attr(\"y\", 36)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"24px\")\n      .style(\"font-family\", \"Roboto\")\n      .text(opts._title)\n\n    const g = svg.append(\"g\")\n      .attr(\"width\", opts._innerWidth)\n      .attr(\"height\", opts._innerHeight)\n      .attr(\"transform\", `translate(${opts._margin.left}, ${opts._margin.top + opts._titleHeight})`)\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(yAxis)\n      .style(\"font-size\", \"1.2em\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth},0)`)\n      .style(\"font-family\", \"Roboto\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(xAxis)\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, ${opts._innerHeight})`)\n      .style(\"font-size\", \"1em\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append(\"g\")\n      .attr(\"class\", \"xgrid\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, ${opts._innerHeight})`)\n      .call(createXGrid().tickSize(-opts._innerHeight).tickFormat(\"\"))\n      .style('stroke-width', 0.2)\n\n    g.append(\"g\")\n      .attr(\"class\", \"grid\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, 0)`)\n      .call(createYGrid().tickSize(-opts._innerWidth).tickFormat(\"\"))\n      .style('stroke-width', 0.2)\n\n    g.append('path')\n      .datum(lineData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth},0)`)\n      .attr(\"d\", pathData)\n  }\n\n  useEffect(() => {\n    opts._margin = {\n      top: opts.marginTop,\n      right: opts.marginRight,\n      bottom: opts.marginBottom,\n      left: opts.marginLeft\n    }\n\n    const temptitleHeight = 40\n    opts._yAxisWidth = 5 + (d3max(data.map((r) => r.v.toString().length)) * 12)\n\n    opts._title = opts.title ? opts.title : ''\n    opts._titleHeight = opts.title.length === 0 ? 0 : temptitleHeight\n\n    const parentElem = d3select(node.current).node()\n    opts._width = parentElem.getBoundingClientRect().width - 4\n    opts._height = opts._margin.top + opts._margin.bottom + opts._titleHeight + opts.heightChart\n\n    opts._innerWidth = opts._width - opts._margin.right - opts._margin.left - opts._yAxisWidth\n    opts._innerHeight = opts.heightChart\n\n    opts._xScaleSliding = d3scaleUtc()\n      .domain(d3extent(opts._data.map(d => new Date(`${d.k}T00:00:00`))))\n      .range([0, opts._innerWidth]).nice(d3timeDay)\n\n    opts._yScaleSliding = d3scaleLinear()\n      .domain([0, d3extent(opts._data.map(d => d.v)).slice(-1)])\n      .range([opts.slidingWindowHeight - 20, 20]).nice()\n\n    if (opts.slidingWindow === true) createSlidingWindow()\n    drawChart(data, true)\n\n  }, [props])\n\n  return (\n    <div>\n      <svg width=\"100%\" className=\"d3-class\" ref={node} />\n      <svg width=\"100%\" className=\"d3-class\" ref={snode} />\n    </div>\n  )\n}\n\n","import * as React from 'react'\nimport styles from './styles.module.css'\n// @ts-ignore\nimport { LineChart as LineChartD3 } from './LineChart/LineChart.tsx'\n\ninterface Props {\n  text: string\n}\n\nexport const ExampleComponent = ({ text }: Props) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\nexport const LineChart = LineChartD3\n","import React from 'react'\n\nimport { LineChart } from 'd3js-react-charts'\n\nconst App = () => {\n  return (\n    <div>\n      <LineChart text=\"Create React Library Example 😄\" />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}