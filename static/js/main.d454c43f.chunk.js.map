{"version":3,"sources":["Components/Navbar.tsx","../../src/LineChart/LineChartConfig.js","../../src/LineChart/LineChart.tsx","../../src/index.tsx","Documentation/LineChartDoc.tsx","App.tsx","index.tsx"],"names":["NavBar","styled","nav","props","theme","createProperty","name","type","desc","value","dataChart","n","data","d","i","k","v","Math","generateData","config","defaultConfig","p","LineChartConfig","LineChart","memo","opts","Object","node","useRef","snode","brush","d3brushX","someSVG","s1","a","s2","b","selectionRange","d3event","startTstmp","endTstmp","lineData","r","rk","Date","drawChart","clearTimeout","setTimeout","noBrushUpdate","minMaxTime","d3extent","updateBrush","d3min","xScale","d3scaleUtc","xAxis","d3axisBottom","yScale","d3scaleLinear","yAxis","d3axisLeft","pathData","d3line","svg","d3select","_yAxisWidth","g","left","createXGrid","createYGrid","useEffect","top","right","bottom","marginLeft","d3max","parentElem","xAxisBrush","yAxisBrush","createSlidingWindow","width","className","ref","SubContainer","div","Table","table","Th","th","Td","td","InputStyled","input","APIConfig","children","Input","inputType","onChange","e","onchange","target","onBlur","onblur","configInfo","docs","forEach","assign","LineChartDoc","useState","chartData","setData","chartConfig","setConfig","x","applyChange","existingConfig","changeDetected","console","log","handleChange","val","id","modifiedState","map","c","changedVal","parseInt","fullState","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d454c43f.chunk.js","sourcesContent":["import styled  from 'styled-components'\n\nexport const NavBar = styled.nav`\n  background-color: ${props => props.theme === 'dark' ? '#040404' : '#EE4E02'};\n  transition: background-color 1s ease-in-out;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 10px;\n  font-size: 20px;\n`\n","\nconst createProperty = (name, type, desc, value) => {\n  return {\n    name,\n    type,\n    desc,\n    value,\n  }\n}\n\nconst generateData = (n) => {\n  const data = []\n  let d = new Date()\n  for (let i = 0; i < n; ++i) {\n    data.push({\n      k: d.toISOString().slice(0,10),\n      v: i + Math.floor(Math.random() * 2025)\n    })\n    d.setTime(d.getTime() + (864e2 * 1e3))\n  }\n  return data\n}\n\nconst dataChart = generateData(800)\n\nconst configChart = {\n  \"docs\": [\n    createProperty(\"barPadding\", \"Numeric\",\n      \"Adjust distance between two adjacent bars.\", 10),\n    createProperty(\"barWidth\", \"Numeric\",\n      \"Adjust the width of each bar. Default 50\", 50),\n    createProperty(\"heightChart\", \"Numeric\",\n      \"Height of the chart. Default 500\", 600),\n    createProperty(\"marginBottom\", \"Numeric\",\n      \"The margin from the bottom of the element\", 40),\n    createProperty(\"marginLeft\", \"Numeric\",\n      \"The margin from the left of the element\", 20),\n    createProperty(\"marginRight\", \"Numeric\",\n      \"The margin from the right of the element\", 40),\n    createProperty(\"marginTop\", \"Numeric\",\n      \"The margin from the top of the element\", 20),\n    createProperty(\"slidingWindow\", \"Boolean\",\n      \"Display a sliding window for using the Brush\", true),\n    createProperty(\"slidingWindowHeight\", \"Numeric\",\n      \"Sliding window height\", 160),\n    createProperty(\"title\", \"Text\",\n      \"The title to display on the chart\", \"Title\")\n  ]\n}\n\nexport const config = configChart\nexport const data = dataChart\n","import React, { memo, useEffect, useRef } from 'react'\n// @ts-ignore\nimport {\n  d3axisBottom,\n  d3axisLeft,\n  d3brushX,\n  d3curveMonotoneX,\n  d3event,\n  d3extent,\n  d3line,\n  d3max,\n  d3min,\n  d3scaleLinear,\n  d3scaleUtc,\n  d3select,\n  d3timeDay\n} from \"../D3Config/D3Config.js\"\n\n/* Import all configuration from LineChartConfig */\n// @ts-ignore\nimport {config, data as defaultData} from './LineChartConfig'\n\n/* Default configuration */\nconst defaultConfig = {}\nconfig.docs.forEach((p) => {\n  defaultConfig[p.name] = p.value\n})\n\nconst LineChartD3 = (props) => {\n  const opts = Object.assign({}, defaultConfig, props.config)\n  const node = useRef(null)\n  const snode = useRef(null)\n\n  const theme = props.theme ? props.theme : 'light'\n  const data = props.data ? props.data : defaultData\n\n  opts._data = data\n  opts._dbclick = false\n\n  function updateBrush(someSVG, a, b) {\n    const brush = d3brushX()\n      .extent([[0, 0], [opts._innerWidth, opts.slidingWindowHeight - 40]])\n\n    opts._slidingBrush = brush\n    opts._slidingBrush.on(\"end\", updateChartBrush)\n\n    someSVG.append(\"g\")\n      .attr(\"class\", \"slidingBrush\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, 20)`)\n\n    const s1 = a || 0\n    const s2 = b || 0\n\n    someSVG.select(\".slidingBrush\")\n      .call(brush)\n      .call(brush.move, [s1,s2])\n  }\n\n  function createSlidingWindow() {\n    // Get the node that will be used for creating the sliding window\n    const svg = d3select(snode.current)\n    svg.selectAll('*').remove()\n    svg.attr(\"width\", opts._width)\n      .attr(\"height\", opts.slidingWindowHeight)\n\n    opts._slidingSVG = svg\n    updateBrush(svg, 0, 0)\n\n    const xAxisBrush = d3axisBottom(opts._xScaleSliding)\n    const yAxisBrush = d3axisLeft(opts._yScaleSliding)\n      .tickValues(opts._yScaleSliding.domain())\n\n    const g = svg.append(\"g\")\n      .attr(\"width\", opts._innerWidth)\n      .attr(\"height\", opts.slidingWindowHeight)\n\n    g.append('g')\n      .call(xAxisBrush)\n      .style(\"font-size\", \"1em\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, ${opts.slidingWindowHeight - 20})`)\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(yAxisBrush)\n      .style(\"font-size\", \"1.2em\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, 0)`)\n      .style(\"font-family\", \"Roboto\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    const pathData = d3line().curve(d3curveMonotoneX)\n      .x(d => opts._xScaleSliding( new Date(`${d.k}T00:00:00`)))\n      .y(d => opts._yScaleSliding(d.v))\n\n    g.append('path')\n      .datum(opts._data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth},0)`)\n      .attr(\"d\", pathData)\n  }\n\n  function updateChartBrush() {\n    const selectionRange = d3event.selection\n\n    if (selectionRange && selectionRange !== [0,0]) {\n      const startTstmp = opts._xScaleSliding.invert(selectionRange[0])\n      const endTstmp = opts._xScaleSliding.invert(selectionRange[1])\n\n      const lineData = data.filter((r) => {\n        const rk = new Date(r.k)\n        if (rk >= startTstmp && rk <= endTstmp) return true\n        return false\n      })\n\n      opts._currData = lineData\n      drawChart(lineData, true)\n    }\n  }\n\n  function updateChart() {\n    const selectionRange = d3event.selection\n    if (selectionRange) {\n      const startTstmp = opts._xScale.invert(selectionRange[0])\n      const endTstmp = opts._xScale.invert(selectionRange[1])\n\n      const lineData = data.filter((r) => {\n        const rk = new Date(r.k)\n        if (rk >= startTstmp && rk <= endTstmp) return true\n        return false\n      })\n\n      if (lineData.length <= 3) {\n        lineData.length = 0\n        lineData.push(...opts._currData)\n      }\n\n      opts._currData = lineData\n      drawChart(lineData, false)\n    } else {\n      if (opts._dbclick) {\n        clearTimeout(opts._dbclickTimer)\n        drawChart(data, true)\n      } else {\n        opts._dbclickTimer = setTimeout(() => { opts._dbclick = false }, 200)\n      }\n\n      opts._dbclick = !opts._dbclick\n    }\n  }\n\n\n  const drawChart = (lineData, noBrushUpdate) => {\n    if (!noBrushUpdate) {\n      const minMaxTime = d3extent(lineData.map(d => new Date(`${d.k}T00:00:00`)))\n\n      updateBrush(opts._slidingSVG,\n        Math.floor(opts._xScaleSliding(minMaxTime[0])),\n        Math.floor(opts._xScaleSliding(minMaxTime[1])))\n    }\n\n    const brush = d3brushX()\n      .extent([[0,0],[opts._innerWidth, opts._innerHeight]])\n      .on(\"end\", updateChart)\n\n    // xScale is for the length along x-axis\n    d3min(lineData.map((d) => d.k));\n    const xScale = d3scaleUtc()\n      .domain(d3extent(lineData.map(d => new Date(`${d.k}T00:00:00`))))\n      .range([0, opts._innerWidth]).nice(d3timeDay)\n    opts._xScale = xScale\n    const xAxis = d3axisBottom(xScale)\n\n    // yScale is for the names of the keys along y-axis\n    const yScale = d3scaleLinear()\n      .domain(d3extent(lineData.map(d => d.v)))\n      .range([opts._innerHeight, 0]).nice()\n    const yAxis = d3axisLeft(yScale)\n\n    const pathData = d3line().curve(d3curveMonotoneX)\n      .x(d => xScale( new Date(`${d.k}T00:00:00`)))\n      .y(d => yScale(d.v))\n\n    const createXGrid = () => d3axisBottom(xScale)\n    const createYGrid = () => d3axisLeft(yScale)\n\n    // Get the node that will be used for creating the chart\n    const svg = d3select(node.current)\n    svg.selectAll('*').remove()\n\n    svg.attr(\"width\", opts._width)\n      .attr(\"height\", opts._height)\n\n    svg.append(\"g\")\n      .attr(\"class\", \"brush\")\n      .attr(\"transform\", `translate(${opts._margin.left + opts._yAxisWidth}, ${opts._titleHeight + opts._margin.top})`)\n\n    svg.select(\".brush\")\n      .call(brush)\n\n    svg.append(\"text\")\n      .attr(\"x\", Math.round(opts._width / 2))\n      .attr(\"y\", 36)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"24px\")\n      .style(\"font-family\", \"Roboto\")\n      .text(opts._title)\n\n    const g = svg.append(\"g\")\n      .attr(\"width\", opts._innerWidth)\n      .attr(\"height\", opts._innerHeight)\n      .attr(\"transform\", `translate(${opts._margin.left}, ${opts._margin.top + opts._titleHeight})`)\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(yAxis)\n      .style(\"font-size\", \"1.2em\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth},0)`)\n      .style(\"font-family\", \"Roboto\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append('g')\n      .call(xAxis)\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, ${opts._innerHeight})`)\n      .style(\"font-size\", \"1em\")\n      .style(\"color\", `${theme === 'dark' ? 'white' : 'black'}`)\n\n    g.append(\"g\")\n      .attr(\"class\", \"xgrid\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, ${opts._innerHeight})`)\n      .call(createXGrid().tickSize(-opts._innerHeight).tickFormat(\"\"))\n      .style('stroke-width', 0.2)\n\n    g.append(\"g\")\n      .attr(\"class\", \"grid\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth}, 0)`)\n      .call(createYGrid().tickSize(-opts._innerWidth).tickFormat(\"\"))\n      .style('stroke-width', 0.2)\n\n    g.append('path')\n      .datum(lineData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"transform\", `translate(${opts._yAxisWidth},0)`)\n      .attr(\"d\", pathData)\n  }\n\n  useEffect(() => {\n    opts._margin = {\n      top: opts.marginTop,\n      right: opts.marginRight,\n      bottom: opts.marginBottom,\n      left: opts.marginLeft\n    }\n\n    const temptitleHeight = 40\n    opts._yAxisWidth = 5 + (d3max(data.map((r) => r.v.toString().length)) * 12)\n\n    opts._title = opts.title ? opts.title : ''\n    opts._titleHeight = opts.title.length === 0 ? 0 : temptitleHeight\n\n    const parentElem = d3select(node.current).node()\n    opts._width = parentElem.getBoundingClientRect().width - 4\n    opts._height = opts._margin.top + opts._margin.bottom + opts._titleHeight + opts.heightChart\n\n    opts._innerWidth = opts._width - opts._margin.right - opts._margin.left - opts._yAxisWidth\n    opts._innerHeight = opts.heightChart\n\n    opts._xScaleSliding = d3scaleUtc()\n      .domain(d3extent(opts._data.map(d => new Date(`${d.k}T00:00:00`))))\n      .range([0, opts._innerWidth]).nice(d3timeDay)\n\n    opts._yScaleSliding = d3scaleLinear()\n      .domain([0, d3extent(opts._data.map(d => d.v)).slice(-1)])\n      .range([opts.slidingWindowHeight - 20, 20]).nice()\n\n    if (opts.slidingWindow === true) createSlidingWindow()\n    drawChart(data, true)\n\n  }, [props])\n\n  return (\n    <div>\n      <svg width=\"100%\" className=\"d3-class\" ref={node} />\n      <svg width=\"100%\" className=\"d3-class\" ref={snode} />\n    </div>\n  )\n}\n\nexport const LineChart = memo(LineChartD3)\nexport const LineChartConfig = config\n","// @ts-ignore\nimport {\n  LineChart as LineChartD3,\n  LineChartConfig as LineChartConfigD3\n} from './LineChart/LineChart'\n\nexport const LineChartConfig = LineChartConfigD3\nexport const LineChart = LineChartD3\n","// @ts-ignore\nimport React, { useState } from 'react'\nimport { LineChart, LineChartConfig } from 'd3js-react-charts'\nimport styled from 'styled-components'\n\nconst SubContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Table = styled.table`\n  border: 1px solid orange;\n  margin: 20px;\n  width: calc(100% - 40px);\n`\n\nconst Th = styled.th`\n  border: 1px solid gray;\n  padding: 15px 10px;\n  font-size: 20px;\n  text-align: left;\n`\n\nconst Td = styled.td`\n  padding: 2px 10px;\n  font-size: 16px;\n  border: 1px solid black;\n`\n\nconst InputStyled = styled.input`\n  font-size: 16px;\n  border: 0px solid black;\n  width: 100px;\n`\n\nconst APIConfig = (props: any) => {\n  return <SubContainer>\n    {props.children}\n  </SubContainer>\n}\n\nconst Input = (props: any) => {\n  let inputType = 'text'\n  if (props.type === 'Numeric') {\n    inputType = 'number'\n  }\n\n  return <InputStyled type={inputType} value={props.value}\n    onChange={(e) => { props.onchange(e.target.value, props.name) }}\n    onBlur={() => props.onblur() }\n  />\n}\n\nconst configInfo = {}\nconst config = LineChartConfig\nconfig.docs.forEach((p: any) => {\n  const r = Object.assign({}, p)\n  configInfo[r.name] = r.value\n})\n\nconst LineChartDocs = () => {\n  const [chartData, setData] = useState(config)\n  const [chartConfig, setConfig] = useState(configInfo)\n  let x = 123\n\n  function applyChange() {\n    const existingConfig = Object.assign({}, chartConfig)\n    const configInfo = {}\n    let changeDetected = false\n    chartData.docs.forEach((p: any) => {\n      configInfo[p.name] = p.value\n      if (configInfo[p.name] !== existingConfig[p.name]) {\n        changeDetected = true\n      }\n    })\n\n    console.log(changeDetected)\n    setConfig(configInfo)\n  }\n\n  function handleChange(val: any, id: any) {\n    // @ts-ignore\n    const modifiedState = chartData.docs.map((c) => Object.assign({}, c))\n    // @ts-ignore\n    modifiedState.forEach((p) => {\n      if (p.name === id) {\n        let changedVal = val\n        if (p.type === 'Numeric') {\n          changedVal = parseInt(changedVal, 10) || 0\n        }\n        p.value = changedVal\n      }\n    })\n\n    const fullState = Object.assign({}, chartData)\n    fullState.docs = modifiedState\n    setData(fullState)\n  }\n\n  return (\n      <div>\n        <APIConfig>\n          <Table width=\"100%\">\n            <thead>\n            <tr>\n              <Th>Name</Th>\n              <Th>Random</Th>\n              <Th>Value</Th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <Td>data</Td>\n              <Td>The input data that will be used to create the Bar Chart</Td>\n              <Td>Input data (array of objects)</Td>\n            </tr>\n            {\n              // @ts-ignore\n              chartData.docs.map((p) => {\n                return (\n                  <tr key={++x}>\n                    <Td key={++x}>{p.name}</Td>\n                    <Td key={++x}>{p.desc}</Td>\n                    <Td key={++x}>\n                      <Input name={p.name} value={p.value} type={p.type}\n                        onchange={handleChange}\n                        onblur={applyChange} />\n                    </Td>\n                  </tr>\n                )\n              })\n            }\n            </tbody>\n          </Table>\n        </APIConfig>\n        <LineChart config={chartConfig} />\n      </div>\n  )\n}\n\nexport const LineChartDoc = LineChartDocs\n","import React from 'react'\n\nimport { NavBar } from './Components/Navbar'\nimport { LineChartDoc } from './Documentation/LineChartDoc'\n\nconst App = () => {\n  return (\n    <div>\n      <NavBar><span>D3 charts in React</span></NavBar>\n      <LineChartDoc />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}